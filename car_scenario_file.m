function [allData, scenario, sensor] = car_scenario_file()
%car_scenario_file - Returns sensor detections
%    allData = car_scenario_file returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = car_scenario_file optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 24.1 (R2024a) and Automated Driving Toolbox 24.1 (R2024a).
% Generated on: 10-Apr-2025 12:36:35

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, isValidTime] = sensor(poses, time);
    numObjects = length(objectDetections);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.518 0], ...
    'Height', 1.5, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('StopTime', 0.5, ...
    'GeoReference', [30.752 103.9295 0], ...
    'VerticalAxis', 'Y');

% Add all road segments
roadCenters = [-303.97894716743 -329.71982370732 -0.42412814724992;
    -153.14518489815 -125.45396986955 -0.0030758283571828];
laneSpecification = lanespec([1 1]);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', '银杏大道');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 4.848, ...
    'Width', 1.842, ...
    'Height', 1.517, ...
    'Position', [-228.1 -230.45 -0.2], ...
    'RearOverhang', 1.119, ...
    'FrontOverhang', 0.911, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-228.1 -230.45 -0.2;
    -200.76 -193.43 -0.13];
speed = [25;25];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Length', 4.848, ...
    'Width', 1.842, ...
    'Height', 1.517, ...
    'Position', [-261.45 -275.03 -0.3], ...
    'RearOverhang', 1.119, ...
    'FrontOverhang', 0.911, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [-261.45 -275.03 -0.3;
    -234.76 -238.92 -0.22];
speed = [20;20];
trajectory(car1, waypoints, speed);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 9, ...
    'Width', 3, ...
    'Height', 3.5, ...
    'Position', [-194.96 -178.94 -0.11], ...
    'RearOverhang', 2.41, ...
    'FrontOverhang', 1.25, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'Truck');
waypoints = [-194.96 -178.94 -0.11;
    -221.23 -214.84 -0.18];
speed = [15;15];
trajectory(truck, waypoints, speed);

actor(scenario, ...
    'ClassID', 7, ...
    'Length', 0.3, ...
    'Width', 0.3, ...
    'Height', 5, ...
    'Position', [-209.04 -209.6 0], ...
    'Yaw', 56, ...
    'Name', 'RSU');

bicycle = actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.63, ...
    'Width', 0.55, ...
    'Height', 1.53, ...
    'Position', [-188.18 -178.11 -0.1], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'Bicycle');
waypoints = [-188.18 -178.11 -0.1;
    -179.39 -166.17 -0.07];
speed = [5;5];
trajectory(bicycle, waypoints, speed);

