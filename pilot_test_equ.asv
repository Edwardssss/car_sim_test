function [equalise_signal,h_est] = pilot_test_equ(rx_signal,faded_signal,...
    tx_signal,ofdm_subframe_num,pilot_spacing)

%CHAN_EQUALISER 信道均衡

frame_sample_num = numel(rx_signal)/ofdm_subframe_num;       % 每符号采样点数
subcarrier_num = pow2(floor(log2(frame_sample_num)));   % 实际用于传输数据的子载波数

% 重组为矩阵(行=采样点，列=符号)
faded_signal_matrix = reshape(faded_signal, [frame_sample_num,ofdm_subframe_num]);
tx_signal_matrix = reshape(tx_signal, [frame_sample_num,ofdm_subframe_num]);

% 去除循环前缀(保留有效数据部分)
faded_signal_matrix(1:(frame_sample_num - subcarrier_num),:) = [];
tx_signal_matrix(1:(frame_sample_num - subcarrier_num),:) = [];

% 信道估计
h = zeros(size(tx_signal_matrix)); % 估计的信道响应
for i = 1:size(tx_signal_matrix,1)
    for j = 1:size(tx_signal_matrix,2)
        % 第一个与最后一个子载波强制作为导频
        if i == 1
            if abs(tx_signal_matrix(i,j)) == 0
                sample(i,j) = 1; % 防止因为除0导致NaN出现
            else
                sample(i,j) = faded_signal_matrix(i,j) ./ tx_signal_matrix(i,j);
            end
        elseif mod(i,pilot_spacing) == 0
            if abs(tx_signal_matrix(i,j)) == 0
                sample(i / pilot_spacing + 1,j) = 1;
            else
                sample(i / pilot_spacing + 1,j) = faded_signal_matrix(i,j) ./ tx_signal_matrix(i,j);
            end
        end
    end
end

for i = 1:size(tx_signal_matrix,1)
    for j = 1:size(tx_signal_matrix,2)
        
    end
end

% 对导频之间的子载波进行频域线性插值
pilot_index = 1:pilot_spacing:64;
for t = 1:size(tx_signal_matrix,2)
    h(:,t) = interp1(pilot_index,sample(pilot_index,t),1:size(tx_signal_matrix,1));
end

% 将循环前缀部分的信道响应设为与第一个子载波相同
for q = 1:(frame_sample_num - subcarrier_num)
    h = [h(1,:);h];
end
h_est = h;
% 序列化输出
H = reshape(h,[numel(h),1]);
H(isnan(H)) = 1; % 将NaN设置为1(避免分母出现0)

% 信号均衡
equalise_signal = rx_signal ./ H;
equalise_signal(isnan(equalise_signal)) = 0;            % 将所有NaN设置为0

end




